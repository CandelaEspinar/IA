import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
from datetime import datetime, timedelta
import folium
import networkx as nx
import webbrowser

# Coordenadas de las estaciones
LISTA_COORDENADAS = {
    "LINEA_A": {
        "Alberti": [-34.60979154021843, -58.40086740463643],
        "Pasco": [-34.609455989895245, -58.39833539938651],
        "Congreso": [-34.608996813572965, -58.39268130286541],
        "Sáenz Peña": [-34.609350026351635, -58.38669461230903],
        "Lima": [-34.60904096524644, -58.382553281561165], #TRANSBORDO 3
        "Piedras": [-34.60886435838594, -58.37861579874318],
        "Perú": [-34.60857295624564, -58.37492507907565], #TRANSBORDO 2
        "Plaza de Mayo": [-34.60875839408815, -58.37151330936176],
       
    },
    "LINEA_B": {
        "Pasteur": [-34.60409382222638, -58.39968610352264],
        "Callao": [-34.60434108592872, -58.39243341083207],
        "Uruguay": [-34.60400961150244, -58.38674150304544],
        "Carlos Pellegrini": [-34.60370936151744, -58.381380708823514], #TRANSBORDO 4
        "Florida": [-34.603244782294965, -58.37454489610343],
        "Leandro N. Alem": [-34.60302925135683, -58.37004749037363],
    },
    "LINEA_C": {
        "Constitución": [-34.62753942668646, -58.38156121435256],
        "San Juan": [-34.622153370728164, -58.37994066311232],
        "Independencia": [-34.6180519466846, -58.380256098860485], #TRANSBORDO 1
        "Moreno": [-34.61237244698663, -58.38060876062811],
        "Avenida de Mayo": [-34.60899098423044, -58.38066790483753], #TRANSBORDO 3
        "Diagonal Norte": [-34.60482400192541, -58.379488963667214], #TRANSBORDO 4
        "Lavalle": [-34.60207510706261, -58.37814441867528],
        "General San Martin": [-34.59553840845914, -58.37745834587982],
        "Retiro": [-34.59238671801715, -58.37594819705223]
    },
    "LINEA_D": {
        "Facultad de Medicina": [-34.5993682836706, -58.3977359491304],
        "Callao": [-34.59957140474557, -58.392307158181815],
        "Tribunales": [-34.60176154833913, -58.38456093858365],
        "9 de Julio": [-34.60453888530524, -58.38014065809253], #TRANSBORDO 4
        "Catedral": [-34.60757221396939, -58.37419688300631] #TRANSBORDO 2
    },
    "LINEA_E": {
        "Pichincha": [-34.62304099718662, -58.39710097116426],
        "Entre Ríos": [-34.62270550042393, -58.391489789929345],
        "San José": [-34.62224639739259, -58.385224149714155],
        "Independencia": [-34.61812318513492, -58.380224512115895], #TRANSBORDO 1
        "Belgrano": [-34.6128518852584, -58.37787489702144],
        "Bolivar": [-34.60961123829135, -58.37401251606132] #TRANSBORDO 2
    }
}


# Festivos de Buenos Aires
FESTIVOS = [
    "01-01", "24-03", "02-04", "01-05", "25-05", "20-06", "09-07", "17-08",
    "12-10", "20-11", "08-12", "25-12"
]

# Grafo de la red
grafo = nx.Graph()

# Agregar conexiones a partir de las coordenadas
for linea, estaciones in LISTA_COORDENADAS.items():
    estaciones_lista = list(estaciones.keys())
    for i in range(len(estaciones_lista) - 1):
        grafo.add_edge(estaciones_lista[i], estaciones_lista[i + 1], weight=500)

# Agregar transbordos entre líneas
transbordos = [
    ("Lima", "Carlos Pellegrini", 200),
    ("Diagonal Norte", "Bolivar", 300),
    ("Leandro N. Alem", "Retiro", 400),
    ("Independencia", "Carlos Pellegrini", 250),
    ("Moreno", "Avenida de Mayo", 150),
    ("Lima", "Avenida de Mayo", 100),
    ("Catedral", "Avenida de Mayo", 150),
    ("Plaza de Mayo", "Avenida de Mayo", 100),
    ("Carlos Pellegrini", "Diagonal Norte", 200),
    ("Catedral", "Bolivar", 150),
    ("Independencia", "Moreno", 250),
]

for origen, destino, peso in transbordos:
    grafo.add_edge(origen, destino, weight=peso)

# Función para calcular si es un día festivo
def es_festivo(fecha):
    return fecha.strftime("%d-%m") in FESTIVOS

# Función para validar el horario del metro
def horario_metro_operativo(fecha, hora):
    dia_semana = fecha.weekday()  # 0=Lunes, 6=Domingo
    inicio_operativo = None
    fin_operativo = datetime.strptime("23:00", "%H:%M").time()

    if dia_semana in [0, 1, 2, 3, 4]:  # Lunes a viernes
        inicio_operativo = datetime.strptime("05:30", "%H:%M").time()
    elif dia_semana == 5:  # Sábados
        inicio_operativo = datetime.strptime("06:00", "%H:%M").time()
    else:  # Domingos y feriados
        inicio_operativo = datetime.strptime("08:00", "%H:%M").time()

    if not (inicio_operativo <= hora <= fin_operativo):
        return False, "El servicio de metro no está operativo en el horario seleccionado."
    if datetime.strptime("22:30", "%H:%M").time() <= hora <= fin_operativo:
        return True, "Aviso: Es posible que el metro cierre pronto."
    return True, ""


# Función para detectar la línea de una estación
def detectar_linea(estacion):
    """
    Devuelve el nombre de la línea a la que pertenece una estación.
    Si la estación no está en ninguna línea, devuelve None.
    """
    for linea, estaciones in LISTA_COORDENADAS.items():
        if estacion in estaciones:
            return linea
    return None

# Función para calcular la ruta
def calcular_ruta():
    estacion_inicio = estacion_origen.get()
    estacion_destino_var = estacion_destino.get()

    # Validar si las estaciones están seleccionadas
    if not estacion_inicio or not estacion_destino_var:
        messagebox.showerror("Error", "Te olvidaste de seleccionar estación.")
        return

    # Validar entrada de hora y minutos
    hora = hora_var.get()
    minuto = minuto_var.get()
    if not hora and not minuto:
        ahora = datetime.now()
        hora = ahora.hour
        minuto = ahora.minute
        messagebox.showinfo("Aviso", "Se ha calculado el viaje en la hora actual. Te recomendamos ingresar una hora si deseas calcular un viaje en un momento específico.")
    elif (not hora and minuto) or (hora and not minuto):
        messagebox.showerror("Error", "Hora incompleta. Debes proporcionar tanto la hora como los minutos.")
        return

    try:
        # Calcular fecha y hora del viaje
        fecha_viaje = datetime.strptime(fecha_var.get(), "%d-%m-%Y")
        hora_viaje = datetime.strptime(f"{hora}:{minuto}", "%H:%M").time()

        # Validar el horario del metro
        operativo, mensaje_horario = horario_metro_operativo(fecha_viaje, hora_viaje)
        if not operativo:
            messagebox.showerror("Error", mensaje_horario)
            return
        elif mensaje_horario:
            messagebox.showinfo("Aviso", mensaje_horario)

        # Calcular la ruta
        ruta = nx.shortest_path(grafo, source=estacion_inicio, target=estacion_destino_var, weight="weight")
        distancia_total = nx.shortest_path_length(grafo, source=estacion_inicio, target=estacion_destino_var, weight="weight")

        # Detectar transbordos
        transbordos = []
        linea_anterior = detectar_linea(ruta[0])
        for i, estacion in enumerate(ruta[1:], start=1):
            linea_actual = detectar_linea(estacion)
            if linea_actual != linea_anterior:
                transbordos.append((ruta[i - 1], estacion))
                linea_anterior = linea_actual

        # Calcular tiempo estimado de llegada
        tiempo_total = timedelta(minutes=(distancia_total / 500) * 60)
        hora_llegada = datetime.combine(fecha_viaje, hora_viaje) + tiempo_total

        # Mostrar resultados
        mostrar_mapa(ruta)
        mostrar_detalles(ruta, distancia_total, hora_llegada, transbordos)
    except nx.NetworkXNoPath:
        messagebox.showerror("Error", "No existe una ruta entre las estaciones seleccionadas.")

# Función para mostrar detalles de la ruta
def mostrar_detalles(ruta, distancia_total, hora_llegada, transbordos):
    detalles = f"Ruta: {' -> '.join(ruta)}\n\n"
    detalles += f"Distancia total: {distancia_total} metros\n"
    detalles += f"Tiempo estimado: {distancia_total / 500:.2f} minutos\n"
    detalles += f"Hora estimada de llegada: {hora_llegada.strftime('%H:%M')}\n"

    if transbordos:
        detalles += "\nTransbordos:\n"
        for origen, destino in transbordos:
            detalles += f"  - De {origen} a {destino}\n"

    messagebox.showinfo("Detalles de la ruta", detalles)

# Función para mostrar el mapa
def mostrar_mapa(ruta):
    coords = []
    for estacion in ruta:
        for linea, estaciones in LISTA_COORDENADAS.items():
            if estacion in estaciones:
                coords.append(estaciones[estacion])
                break

    if not coords:
        messagebox.showerror("Error", "No se pudieron encontrar coordenadas para algunas estaciones.")
        return

    inicio_coord = coords[0]
    mapa = folium.Map(location=inicio_coord, zoom_start=14)
    for estacion, coord in zip(ruta, coords):
        folium.Marker(coord, popup=estacion).add_to(mapa)
    folium.PolyLine(coords, color="blue", weight=5).add_to(mapa)
    mapa.save("ruta_metro.html")
    webbrowser.open("ruta_metro.html")

# Interfaz gráfica
ventana = tk.Tk()
ventana.title("Calculadora de rutas de metro")

# Variables de las estaciones
estacion_origen = tk.StringVar()
estacion_destino = tk.StringVar()
fecha_var = tk.StringVar()
hora_var = tk.StringVar()
minuto_var = tk.StringVar()

# Establecer la fecha actual como valor inicial
fecha_actual = datetime.now().strftime("%d-%m-%Y")
fecha_var.set(fecha_actual)

# Widgets
ttk.Label(ventana, text="Estación de origen:").grid(row=0, column=0, padx=10, pady=10)
origen_menu = ttk.Combobox(ventana, textvariable=estacion_origen, values=list(grafo.nodes()))
origen_menu.grid(row=0, column=1, padx=10, pady=10)

ttk.Label(ventana, text="Estación de destino:").grid(row=1, column=0, padx=10, pady=10)
destino_menu = ttk.Combobox(ventana, textvariable=estacion_destino, values=list(grafo.nodes()))
destino_menu.grid(row=1, column=1, padx=10, pady=10)

# Selector de fecha
ttk.Label(ventana, text="Fecha de viaje:").grid(row=2, column=0, padx=10, pady=10)
calendario = Calendar(ventana, date_pattern="dd-mm-yyyy", textvariable=fecha_var)
calendario.grid(row=2, column=1, padx=10, pady=10)

# Selector de hora y minutos
ttk.Label(ventana, text="Hora de salida:").grid(row=3, column=0, padx=10, pady=10)
horas = [f"{h:02d}" for h in range(24)]
minutos = [f"{m:02d}" for m in range(60)]
hora_menu = ttk.Combobox(ventana, textvariable=hora_var, values=horas, width=5)
hora_menu.grid(row=3, column=1, padx=10, pady=5, sticky="w")
minuto_menu = ttk.Combobox(ventana, textvariable=minuto_var, values=minutos, width=5)
minuto_menu.grid(row=3, column=1, padx=10, pady=5, sticky="e")

calcular_btn = ttk.Button(ventana, text="Calcular Ruta", command=calcular_ruta)
calcular_btn.grid(row=4, column=0, columnspan=2, pady=20)

# Iniciar la interfaz gráfica
ventana.mainloop()
