# el código funciona, lo único que hay que está regu es que el mapa no se genera bien cuando es un recorrido hacia atrás
# el resto creo que funciona todo y luego ya sería añadir los parametros que querais, creo que indicar que se hace un transbordo y lo que se tarda en el ransbordo estaría bien y cambiar la interfaz.

import tkinter as tk
from tkinter import ttk, messagebox
import folium
import networkx as nx
import webbrowser
from math import radians, sin, cos, sqrt, atan2

# Coordenadas de las estaciones
LISTA_COORDENADAS = {
    "LINEA_A": {
        "Alberti": [-34.60979154021843, -58.40086740463643],
        "Pasco": [-34.609455989895245, -58.39833539938651],
        "Congreso": [-34.608996813572965, -58.39268130286541],
        "Sáenz Peña": [-34.609350026351635, -58.38669461230903],
        "Lima": [-34.60904096524644, -58.382553281561165],
        "Avenida de mayo": [-34.608952661864095, -58.380707921841704],
        "Piedras": [-34.60886435838594, -58.37861579874318],
        "Perú": [-34.60857295624564, -58.37492507907565],
        "Plaza de Mayo": [-34.60875839408815, -58.37151330936176],
    },
    "LINEA_B": {
        "Pasteur": [-34.60409382222638, -58.39968610352264],
        "Callao": [-34.60434108592872, -58.39243341083207],
        "Uruguay": [-34.60400961150244, -58.38674150304544],
        "Carlos Pellegrini": [-34.60370936151744, -58.381380708823514],
        "Lavalle Florida": [-34.603244782294965, -58.37454489610343],
        "Leandro N. Alem": [-34.60302925135683, -58.37004749037363],
    },
    "LINEA_C": {
        "Constitución": [-34.62753942668646, -58.38156121435256],
        "San Juan": [-34.622153370728164, -58.37994066311232],
        "Independencia": [-34.6180519466846, -58.380256098860485],
        "Moreno": [-34.61237244698663, -58.38060876062811],
        "Avenida de Mayo": [-34.60899098423044, -58.38066790483753],
        "Diagonal Norte": [-34.60482400192541, -58.379488963667214],
        "Lavalle": [-34.60207510706261, -58.37814441867528],
        "General San Martin": [-34.59553840845914, -58.37745834587982],
        "Retiro": [-34.59238671801715, -58.37594819705223],
    },
    "LINEA_D": {
        "Facultad de Medicina": [-34.5993682836706, -58.3977359491304],
        "Callao": [-34.59957140474557, -58.392307158181815],
        "Tribunales": [-34.60176154833913, -58.38456093858365],
        "9 de Julio": [-34.60453888530524, -58.38014065809253],
        "Diagonal Norte": [-34.60486562472501, -58.37949692792799],
        "Catedral": [-34.60757221396939, -58.37419688300631],
    },
    "LINEA_E": {
        "Pichincha": [-34.62304099718662, -58.39710097116426],
        "Entre Ríos": [-34.62270550042393, -58.391489789929345],
        "San José": [-34.62224639739259, -58.385224149714155],
        "Independencia": [-34.61812318513492, -58.380224512115895],
        "Belgrado": [-34.6128518852584, -58.37787489702144],
        "Bolivar": [-34.60961123829135, -58.37401251606132],
    },
}

# Grafo de la red
grafo = nx.Graph()

# Agregar conexiones a partir de las coordenadas
for linea, estaciones in LISTA_COORDENADAS.items():
    estaciones_lista = list(estaciones.keys())
    for i in range(len(estaciones_lista) - 1):
        grafo.add_edge(estaciones_lista[i], estaciones_lista[i + 1], weight=500)  # Peso arbitrario para ejemplo

# Agregar transbordos entre líneas
transbordos = [
    ("Lima", "Carlos Pellegrini", 200),
    ("Diagonal Norte", "Bolivar", 300),
    ("Leandro N. Alem", "Retiro", 400),
    ("Independencia", "Carlos Pellegrini", 250),  # Ejemplo de transbordo adicional
    ("Moreno", "Avenida de Mayo", 150),           # Otro transbordo entre líneas
    ("Lima", "Avenida de Mayo", 100),             # Transbordo Línea A y Línea C
    ("Catedral", "Avenida de Mayo", 150),         # Transbordo Línea D y Línea C
    ("Plaza de Mayo", "Avenida de Mayo", 100),    # Transbordo Línea A y Línea C
    ("Carlos Pellegrini", "Diagonal Norte", 200), # Transbordo Línea B y Línea C
    ("Catedral", "Bolivar", 150),                # Transbordo Línea D y Línea E
    ("Independencia", "Moreno", 250),            # Transbordo Línea C y Línea E
    ("Pichincha", "Entre Ríos", 180),            # Transbordo Línea E y Línea C
    ("Humberto 1º", "Independencia", 120),       # Transbordo Línea H y Línea C
    ("9 de Julio", "Diagonal Norte", 100),        # Transbordo Línea D y Línea C
    ("Retiro", "Catedral", 200),                 # Transbordo Línea C y Línea D
    ("Facultad de Medicina", "9 de Julio", 250), # Transbordo Línea D y Línea B
    ("Leandro N. Alem", "9 de Julio", 180),       # Transbordo Línea B y Línea D
    ("Callao", "Facultad de Medicina", 300),     # Transbordo Línea B y Línea D
    ("Catedral", "Bolivar", 180),                # Transbordo Línea D y Línea E
    ("San José", "Avenida de Mayo", 350),        # Transbordo Línea E y Línea C
]

for origen, destino, peso in transbordos:
    grafo.add_edge(origen, destino, weight=peso)

# Función para calcular la ruta
def calcular_ruta():
    estacion_inicio = estacion_origen.get()
    estacion_destino_var = estacion_destino.get()

    if estacion_inicio not in grafo or estacion_destino_var not in grafo:
        messagebox.showerror("Error", "Las estaciones ingresadas no son válidas.")
        return

    try:
        # Cálculo de la ruta más corta
        ruta = nx.shortest_path(grafo, source=estacion_inicio, target=estacion_destino_var, weight="weight")
        distancia_total = nx.shortest_path_length(grafo, source=estacion_inicio, target=estacion_destino_var, weight="weight")
        mostrar_mapa(ruta, distancia_total)
        mostrar_detalles(ruta, distancia_total)
    except nx.NetworkXNoPath:
        messagebox.showerror("Error", "No existe una ruta entre las estaciones seleccionadas.")

# Función para mostrar detalles de la ruta
def mostrar_detalles(ruta, distancia_total):
    detalles = "Ruta:\n"
    for i in range(len(ruta) - 1):
        detalles += f"{ruta[i]} -> "
        if (ruta[i] in LISTA_COORDENADAS["LINEA_A"] and ruta[i + 1] in LISTA_COORDENADAS["LINEA_B"]) or \
           (ruta[i] in LISTA_COORDENADAS["LINEA_B"] and ruta[i + 1] in LISTA_COORDENADAS["LINEA_C"]):
            detalles += " (Transbordo)\n"
    detalles += f"{ruta[-1]}\n\n"
    detalles += f"Distancia total: {distancia_total} metros\n"
    detalles += f"Tiempo estimado: {distancia_total / 500:.2f} minutos\n"
    messagebox.showinfo("Detalles de la ruta", detalles)

# Función para mostrar el mapa
def mostrar_mapa(ruta, distancia_total):
    inicio_coord = LISTA_COORDENADAS["LINEA_A"].get(ruta[0], [0, 0])
    mapa = folium.Map(location=inicio_coord, zoom_start=14)

    coords = []
    for estacion in ruta:
        for linea, estaciones in LISTA_COORDENADAS.items():
            if estacion in estaciones:
                coords.append(estaciones[estacion])
                folium.Marker(estaciones[estacion], popup=estacion).add_to(mapa)
                break

    folium.PolyLine(coords, color="blue", weight=5).add_to(mapa)
    mapa.save("ruta_metro.html")
    webbrowser.open("ruta_metro.html")

# Interfaz gráfica
ventana = tk.Tk()
ventana.title("Calculadora de rutas de metro")

# Variables de las estaciones
estacion_origen = tk.StringVar()
estacion_destino = tk.StringVar()

# Widgets
ttk.Label(ventana, text="Estación de origen:").grid(row=0, column=0, padx=10, pady=10)
origen_menu = ttk.Combobox(ventana, textvariable=estacion_origen, values=list(grafo.nodes()))
origen_menu.grid(row=0, column=1, padx=10, pady=10)

ttk.Label(ventana, text="Estación de destino:").grid(row=1, column=0, padx=10, pady=10)
destino_menu = ttk.Combobox(ventana, textvariable=estacion_destino, values=list(grafo.nodes()))
destino_menu.grid(row=1, column=1, padx=10, pady=10)

# Botón para calcular la ruta
calcular_btn = ttk.Button(ventana, text="Calcular Ruta", command=calcular_ruta)
calcular_btn.grid(row=2, column=0, columnspan=2, pady=20)

# Iniciar la interfaz gráfica
ventana.mainloop()


